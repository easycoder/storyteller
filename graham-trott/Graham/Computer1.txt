Links: ~select:-:Select a subject!selected disabled hidden|S-Joan:Mum|SRonald:Dad|T-Music:Favourite music|T-Films:Favourite films|T-Technology:The Geek's Progress~~space:3~Next: ~tid:Computer2:Assemblers and Compilers~

## Building my first computer

It was hard to be a computer enthusiast in 1975. Basically you had to work in a university or company that gave access, usually via a TeleType - a very slow electric typewriter device - to a distant time-shared computer that charged significant fees for its use.

The microprocessor changed all that. For the first time, anyone could build a computer. Not as we know them today, of course, but something that could be programmed to do things. I spent endless hours wiring up components on Vero stripboard, which looked something like this:

~img:stripboard.jpg:center 50%~

In order for a computer to do anything it must be provided with a program, and this was the really hard part. To start with, I had no guarantee the board was wired up correctly. The only test equipment I had was a pen probe that showed green or red for a logic 1 or 0. (I still have this essential piece of kit.) I decided to prove the hardware by toggling an output pin at a suitable rate, e.g. once a second, itself a non-trivial programming exercise that meant having a couple of hundred bytes of correct code at the correct memory location. Since I'd never programmed a microprocessor and only had the manufacturer's datasheet to go on, it was unlikely to work first time. To get there at all also meant writing the code into an EEPROM memory chip. I had nothing with which to program these devices so I spent an entire weekend wiring up a programmer. It comprised a bank of four 16-position thumbwheel switches that could each be set to 0-9, A-F; these provided the address. There was another pair of thumbwheels that provided the data. Then a pushbutton fired the data into the appropriate location. The entire program - often several hundred data items - had to be loaded this way, and if I made a mistake the chip would have to go under an ultra-violet light for 30 minutes to erase it before starting again. The programmer also had two 7-segment LED displays that showed the contents of the location set on the address switches; this was essential to verify I'd programmed it correctly. Most of that weekend was spent correcting wiring mistakes.

It must have been over a week of non-stop headache before I saw any sign of activity from the 6800 chip. Both lamps on my probe lit up together. This meant something was running, but too fast for me to see the changes from 0 to 1 and back. I studied the program carefully and discovered a mistake. After a half-dozen times round the write-test-erase loop I eventually had my 1-second flasher.

I wish I had photos of some of this old hardware. Of course, at the time there were no digital cameras; in fact I don't think I had a camera at all as no photos have surfaced from those times.

## More steps

There were many steps to go. Among the most critical needs were a EEPROM programmer driven from the microprocessor itself and something with which to write programs. I don't remember the exact sequence other than it took months of effort. A friend located a couple of second-hand VDUs (Visual Display Units - a keyboard and a screen) so at least we could see what we were doing; this was a massive step forward. Another was to build circuitry to connect the computer to an audio-cassette drive, which could store data and retrieve it. This was called the "Kansas City" system. It was slow and often unreliable but it was the best we could do. I discovered through the magazines (this was way before the Internet, of course) a guy in California called Ed Smith, who had written an assembler for the 6800 and was selling copies on cassette, so I quickly ordered one. It came with a crude text editor so now we could write programs on the VDU using the editor, save them to tape, load up the assembler, run the file through it (twice) and save the resulting code. Then we'd load the code and hope it worked, which it usually didn't the first few times.

At this point, software became more important than hardware. As long as there was enough memory, we could really do things. My first challenge was to replace all Ed Smith's software with my own. I figured I could do a better job and set out to prove it. My partner-in-crime located some tiny Phillips digital tape drives that used cassettes resembling those for dictating machines. He worked out some circuitry to connect to our computers and I wrote software to control them. Phillips reckoned you could store 32 kilobytes on a tape but I figured they were wasting space allowing for starting and stopping the tape. By shrinking the spaces between data blocks and rewinding the tape a short way before reading, I more than doubled the storage capacity. The code soon developed into a small operating system with files and folders, enabling me to write an editor that didn't rely on  Kansas City any more, and an assembler to go with the editor. We now had "proper" computers to play with.

Links: ~select:-:Select a subject!selected disabled hidden|S-Joan:Mum|SRonald:Dad|T-Music:Favourite music|T-Films:Favourite films|T-Technology:The Geek's Progress~~space:3~Next: ~tid:Computer2:Assemblers and Compilers~
