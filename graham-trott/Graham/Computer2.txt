Links: ~select:-:Select a subject!selected disabled hidden|S-Joan:Mum|SRonald:Dad|T-Music:Favourite music|T-Films:Favourite films|T-Technology:The Geek's Progress~~space:3~

# Assemblers and compilers

Each generation of technology is built on the backs of the previous ones; nothing is ever built from scratch. This makes for a rapid rate of development but also for a considerable degree of vulnerability that's hard to spot. The whole of the Internet - and with it the rest of our society - is dependent on everything working and going on working. A sobering thought. Here's an amusing illustration from the online comic [xkcd.com](https://xkcd.com) illustrating the problem:

~img:dependency.png:center 25%!nolink~

Modern programmers are used to pulling software components from the Internet and integrating them into their own projects, but when I started there was no Internet and few other places to discover how things should be done. I developed my own ways of doing things and the software techniques I've used over the past 4 decades are in many ways little changed from when I started. This no doubt explains why in my later years I found it hard to fit into teams of programmers; I was used to doing things my own way.

Among the first of my projects was an assembler for the 6800 microprocessor, which included its own text editor so that only one program had to be loaded. The editor was line oriented; it didn't rely on a directly addressable screen. The system itself included the miniature Phillips digital tape drives. I built 3 computers, one for myself and one for each of a couple of colleagues/friends who had helped design and build parts of the system. At some point along the way I replaced the line editor with a screen version that would be familiar to people used to vi or emacs. Mine was a lot simpler and more friendly, though. Every command started with Escape, so to open a file you had Escape O, to save Escape S, to assemble Escape A and so on. If you hit Escape twice a table would pop up showing all the options available, so there was nothing to remember.

At the end of the 1970s I'd gotten associated with Windrush Micro Systems, a small and rather amateurish industrial control systems company in Norfolk, who imported American 6800-based computer systems that used floppy disc drives and ran the Flex operating system. My team at British Telecom bought a couple of these systems to control the experiments we ran and I quickly adapted my assembler to use the floppy discs rather than the tape drives. I gradually developed a friendship with the people at Windrush and they used my assembler in their own projects.

My memory is a little hazy on the precise sequence of events. In 1978, Motorola introduced the 6809, a considerable improvement on the earlier 6800. I immediately wrote a cross-assembler to run on Flex, then as soon as there was a 6809 version of the latter I wrote a full assembler for the newer processor. At about that time, the owner of Windrush, Jim Dady, combined forces with an old friend, Bill Dickinson, an assertive New Yorker who wanted to make the company a lot more commercial. I used to visit the factory in North Walsham quite regularly and on one visit we became engaged in a discussion about the current state of high-level language software. At the time, C was a new language and there were no industrial-strength compilers for it. PL/M was around but not for the 6809, and Bill asked me how hard it could be to write a high-level language of that kind. I said - in all honesty - that I had little idea but I'd take away the question and consider it.

I dove right in and spent the next few weeks devising how to implement a compiler. Not knowing either C or PL/M I devised  an arbitrary high-level syntax in the same general area and called it PL/9. I had no formal knowledge of how to write a compiler, either, so I approached it the same way I'd done for the assemblers; from the top down. I looked at typical commands such as A = B + C, translated them into the equivalent machine code and figured out how I'd done it. Then I wrote code that did as far as possible what I'd done in my head. [This is way different to the way most compilers are written; they start by analysing commands and building all kinds of formal representations before doing any actual translation. But I'd never learned how to do that.]

It must have taken a year or so to get PL/9 into a usable form. It included the screen editor and a single-step tracer/debugger that let you step through the program one source line at a time, and all this fitted into 16k bytes of memory, leaving room for a decent sized program to be edited, compiled and run. It was far simpler to use than any competing compiler, it compiled very quickly and the code it produced outperformed all of the others, so it was quite a hit with Flex users around the world and we sold over 1000 copies; a decent achievement for such a small company.

With the introduction of the 68000 processor at the end of the 1980s I rewrote PL/9 as PLuS-68k, much of it while off work recovering from appendicitis; not the best of things to contract in your late thirties. By this time I was very close to the people at Windrush so it was no surprise when I decided to leave BT and join them instead. My timing was pretty disastrous, however; the recession of the early 1990s almost wiped out the company. I've written about that period ~tid:Career3:elsewhere in these memoirs~.

Links: ~select:-:Select a subject!selected disabled hidden|S-Joan:Mum|SRonald:Dad|T-Music:Favourite music|T-Films:Favourite films|T-Technology:The Geek's Progress~~space:3~
