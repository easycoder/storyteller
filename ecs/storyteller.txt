!   Storyteller main script

    script Storyteller
    
    div Tracer
    div Body
    div Container
    div Content
    div TopicText
    div ImageDiv
    div Mask
    div PicDiv
    img BigPic
    img TopImage
    img MidImage
    img BottomImage
    img HomeButton
    img BackButton
    img InfoButton
    h1 Title
    a Link
    img Image
    callback DecoratorCallback
    variable Mobile
    variable Theme
    variable Layout
    variable Border
    variable AspectW
    variable AspectH
    variable ID
    variable TID
    variable Record
    variable N
    variable Margin
    variable WindowWidth
    variable WindowHeight
    variable Left
    variable Top
    variable Width
    variable Height
    variable ButtonSize
    variable TitleText
    variable Payload
    variable Function
    variable Data
    variable Display
    variable Source
    variable Class
    variable Options
    variable LinkCount
    variable ImageCount
    variable DataID
    variable Prefix
    variable Topic
    variable Stack
    variable StackPointer
    variable FontScale
    variable FontSize
    
    clear Mobile
    if mobile
    begin
    	if portrait set Mobile
    end

	rest get Theme from `/data/theme.txt`
    rest get Layout from `/data/themes/` cat Theme cat `/theme.json`
    put property `aspect-w` of Layout into AspectW
    put property `aspect-h` of Layout into AspectH
    
	attach Body to body
    clear Body
    set the style of Body to `overflow:hidden`
    
    create Container in Body
    set style `position` of Container to `relative`
    
    create MidImage in Container
    set attribute `src` of MidImage to `/data/themes/` cat Theme cat `/mid.jpg`
    create TopImage in Container
    set attribute `src` of TopImage to `/data/themes/` cat Theme cat `/top.jpg`
    create BottomImage in Container
    set attribute `src` of BottomImage to `/data/themes/` cat Theme cat `/bottom.jpg`
    create Content in Container
    create Title in Content
    create TopicText in Content

    gosub to CreateButtons
    gosub to SetStyles
    
!    create Tracer in Content
!    set the style of Tracer to `margin-top:2em;background:white`
!    set the id of Tracer to `easycoder-tracer`
!    trace ID TID N StackPointer Stack vertical
    
    create Mask in Container
    set the style of Mask to `position:absolute;top:0;left:0;width:100%;height:100%;`
    	cat `opacity:70%;background:black;display:none`
    create PicDiv in Container
    set the style of PicDiv to
    	`position:absolute;top:0;left:0;text-align:center;width:100%;height:100%;display:none`
    create BigPic in PicDiv
    
    on window resize gosub to SetStyles
    
	load showdown
  	on DecoratorCallback go to Decorate

    get ID from storage as `id`
    if ID is empty put `home` into ID
    get TID from storage as `tid`
    if TID is empty put `content` into TID
    
    put 0 into StackPointer

!	View a record, given its Subject and Topic ids.
ViewRecord:
    rest get Record from `/data/` cat ID cat `/content.txt`
    or begin
    	put `home` into ID
        put `content` into TID
        continue
    end

! 	Add this topic to the stack
    put ID cat `/` cat TID into Stack
    if StackPointer is greater than 0 set style `display` of BackButton to `inline-block`

!	Clear the previous content and build the new
    remove element Title
    remove element TopicText

    create Title in Content
    set style `text-align` of Title to `center`
	set style `margin-bottom` of Title to `0.35em`
    if Mobile
    begin
	    multiply ButtonSize by 10 giving N
	    divide N by 9
	   	set style `margin-top` of Title to N cat `px`
    end
    rest get TitleText from `/data/` cat ID cat `/title.txt`
    if TitleText is empty
    	put ID into TitleText
        continue
    end
    set the content of Title to TitleText

    rest get Topic from `/data/` cat ID cat `/` cat TID cat `.txt`
    or begin
    	put `content` into TID
        rest get Topic from `/data/` cat ID cat `/` cat TID cat `.txt`
        continue
    end

!	Remember where we are
    put ID into storage as `id`
    put TID into storage as `tid`

    create TopicText in Content
    set the style of TopicText to 
    	`width:100%;height:calc(100% - 5em);background:none;overflow-y: auto`
            cat `;padding-right:1em`

!	Handle the links created by the showdown extension
    put 0 into LinkCount
    put 0 into ImageCount
    set the content of TopicText to showdown decode Topic with DecoratorCallback
    set the elements of Link to LinkCount
    set the elements of ImageDiv to ImageCount
    set the elements of Image to ImageCount
    put 0 into N
    while N is less than LinkCount
    begin
        index Link to N
        attach Link to `ec-link-` cat N
        add 1 to N
    end
    on click Link
    begin
        put attribute `data-id` of Link into DataID
        put left 1 of DataID into Prefix
        if Prefix is `S`
        begin
            put from 1 of DataID into ID
            put `content` into TID
            go to ViewAnotherRecord
        end
        else if Prefix is `T`
        begin
            put from 1 of DataID into TID
            go to ViewAnotherRecord
        end
    end
    put 0 into N
    while N is less than ImageCount
    begin
        index ImageDiv to N
        index Image to N
        attach ImageDiv to `ec-imagediv-` cat N
        attach Image to `ec-image-` cat N
        add 1 to N
    end
    on click Image
    begin
        put attribute `data-options` of Image into Options
        print Options
        if the position of `nolink` in Options is -1
        begin
            set style `display` of Mask to `block`
            set style `display` of PicDiv to `block`
            set the style of BigPic to `max-width:93%;max-height:93%;margin-top:2%`
            put attribute `src` of Image into Source
            set attribute `src` of BigPic to Source
            on click PicDiv go to ClearBigPic
            on click BigPic go to ClearBigPic
        end
    end
	stop

!	Create the buttons at the top of the panel
CreateButtons:
	create HomeButton in Content
    set attribute `src` of HomeButton to `icons/home.png`
    on click HomeButton
    begin
        put `home` into ID
        put `content` into TID
        go to ViewAnotherRecord
    end

	create BackButton in Content
    set style `display` of BackButton to `none`
    set attribute `src` of BackButton to `icons/arrow-back.png`
    on click BackButton
    begin
        put the elements of Stack into N
        take 1 from N
        set the elements of Stack to N
        take 1 from StackPointer
        index Stack to StackPointer
        put the position of `/` in Stack into N
        if N is -1 stop
        put left N of Stack into ID
        add 1 to N
        put from N of Stack into TID
        if StackPointer is 0 set style `display` of BackButton to `none`
        go to ViewRecord
    end

	create InfoButton in Content
    set attribute `src` of InfoButton to `icons/info.png`
    on click InfoButton
    begin
        put `info` into ID
        put `content` into TID
        go to ViewAnotherRecord
    end
	return

!	View another record, given the Subject and Topic ids
ViewAnotherRecord:
    put the elements of Stack into N
    add 1 to N
    set the elements of Stack to N
    add 1 to StackPointer
    index Stack to StackPointer
    go to ViewRecord 

!	Remove the mask and overlay image
ClearBigPic:
    set style `display` of Mask to `none`
    set style `display` of PicDiv to `none`
	stop

!	Responsive design: Compute the size and position of all the screen elements
SetStyles:
    put the width of window into WindowWidth
    put the height of window into WindowHeight
    
!	Choose an optimum width based on the window height
	put WindowHeight into Height
	multiply Height by AspectW giving Width
    divide Width by AspectH

!	Make sure the window is wide enough
    take Width from WindowWidth giving Margin
    divide Margin by 2
    if Margin is less than 0
    begin
    	put 0 into Margin
        put WindowWidth into Width
    end
    
!	Style the Container
    set style `left` of Container to Margin cat `px`
    set style `top` of Container to 0
	set style `width` of Container to Width cat `px`
    set style `height` of Container to Height cat `px`
    
!	Style the background images
    set the style of MidImage to `position:absolute;left:0;top:0;width:` cat Width
    	cat `px;height:` cat `calc(` cat Height cat `px - 2vh)`
    set the style of TopImage to `position:absolute;left:0;top:0;width:` cat Width cat `px`
    set the style of BottomImage to `position:absolute;left0;bottom:2vh;width:` cat Width cat `px`

!	Style the Content panel
    put property `border` of Layout into Border
    put property `font-scale` of Layout into FontScale
    multiply Width by Border giving Border
    divide Border by 100
	put Border into Left
    take Left from Width
    take Left from Width

    multiply Border by AspectW giving Top
    divide Top by AspectH
    take Top from Height giving Height
    take Top from Height

    divide Width by 20 giving ButtonSize
    if Mobile multiply ButtonSize by 2
    set style `position` of HomeButton to `absolute`
    set style `left` of HomeButton to 0
    set style `top` of HomeButton to 0
    set style `width` of HomeButton to ButtonSize cat `px`
    set style `height` of HomeButton to ButtonSize cat `px`

    multiply ButtonSize by 2 giving N
    set style `position` of BackButton to `absolute`
    set style `left` of BackButton to N
    set style `top` of BackButton to 0
    set style `width` of BackButton to ButtonSize cat `px`
    set style `height` of BackButton to ButtonSize cat `px`

    set style `position` of InfoButton to `absolute`
    set style `right` of InfoButton to 0
    set style `top` of InfoButton to 0
    set style `width` of InfoButton to ButtonSize cat `px`
    set style `height` of InfoButton to ButtonSize cat `px`

	set the style of Content to
    	`position:absolute;left:` cat Left cat `px;top:` cat Top cat `px;`
        cat `width:` cat Width cat `px;height:` cat Height cat `px`
    
    divide Height by FontScale giving FontSize
    set style `font-size` of Container to FontSize cat `px`
    return

!------------------------------------------------------------------------------
!	This is the Showndown extension.

!	Decorate is called for every occurrence of ~...~ in the topic data
Decorate:
    put the payload of DecoratorCallback into Payload
    put the position of `:` in Payload into N
    if N is -1
    begin
    	if Payload is `clear` gosub to ProcessClear
    end
    else
    begin
        put left N of Payload into Function
        add 1 to N
        put from N of Payload into Data
        if Function is `sid` gosub to ProcessSID
        else if Function is `tid` gosub to ProcessTID
        else if Function is `img` gosub to ProcessImage
    end
    set the payload of DecoratorCallback to Payload
    stop

!	Process a request for a new subject
ProcessSID:
	put Data into Display
    put the position of `:` in Data into N
    if N is not -1
    begin
	    put left N of Data into Data
	    add 1 to N
	    put from N of Display into Display
    end
    put `<a href="#" id="ec-link-` cat LinkCount cat `" class="button"`
    	cat ` data-id="S` cat Data cat `">` cat Display cat `</a>` into Payload
    add 1 to LinkCount
    return

!	Process a request for a new topic
ProcessTID:
	put Data into Display
    put the position of `:` in Data into N
    if N is not -1
    begin
	    put left N of Data into Data
	    add 1 to N
	    put from N of Display into Display
    end
    put `<a href="#" id="ec-link-` cat LinkCount cat `" class="button"`
    	cat `" data-id="T` cat Data cat `">` cat Display cat `</a>` into Payload
    add 1 to LinkCount
    return

!	Process an image, including positioning and class infomation
ProcessImage:
	put empty into Options
	put the position of `/` in Data into N
    if N is -1 put ID into Source
    else
    begin
    	put left N of Data into Source
        add 1 to N
        put from N of Data into Data
    end
    put the position of `:` in Data into N
    put `image` into Class
    if N is not -1 
    begin
        put Source cat `/images/` cat left N of Data into Source
        add 1 to N
        if Data is not empty put Class cat ` ` cat from N of Data into Class
        put the position of `!` in Class into N
        if N is not -1
        begin
        	put Class into Options
            put left N of Class into Class
            add 1 to N
            put from N of Options into Options
        end
    end
    put `<div id="ec-imagediv-` cat ImageCount into Payload
    if Class is not empty put Payload cat `" class="` cat Class into Payload
    if the position of `nolink` in Options is not -1
    begin
        put Payload cat `">` cat `<img id="ec-image-` cat ImageCount cat `" src="data/` cat Source
            cat `" data_options="nolink" style="width:100%" ></div>` into Payload
    end
    else
    begin
        put Payload cat `">` cat `<a href="#">`
            cat `<img id="ec-image-` cat ImageCount cat `" src="data/` cat Source
            cat `" style="width:100%" ></a></div>` into Payload
    end
    add 1 to ImageCount
    return

!	Process a 'clear'
ProcessClear:
    put `<div style="height:1px;clear:both"></div>` into Payload
    return
